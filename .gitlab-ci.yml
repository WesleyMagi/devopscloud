stages:
  - build
  - test
  - dockerise
  - deploy

variables:
  DOCKER_IMAGE_BACKEND: $CI_REGISTRY_IMAGE/backend
  DOCKER_IMAGE_FRONTEND: $CI_REGISTRY_IMAGE/frontend
  KUBE_CONFIG_PATH: $KUBE_CONFIG_PATH
  

backend:
  stage: build
  script:
    - cd spring-boot-react-example
    - ./mvnw clean package
  artifacts:
    paths:
      - spring-boot-react-example/target/*.jar

frontend:
  stage: build
  script:
    - cd spring-boot-react-example/src/main/js
    - npm install
    - npm run build
  artifacts:
    paths:
      - spring-boot-react-example/src/main/resources/static/

test-backend:
  stage: test
  script:
    - cd spring-boot-react-example
    - ./mvnw test


test-frontend:
  stage: test
  script:
    - cd spring-boot-react-example/src/main/js
    - npm test
  
build-docker-backend:
  stage: dockerise
  script:
    - docker build -t $DOCKER_IMAGE_BACKEND:$CI_COMMIT_SHORT_SHA spring-boot-react-example/
    - docker push $DOCKER_IMAGE_BACKEND:$CI_COMMIT_SHORT_SHA

build-docker-frontend:
  stage: dockerise
  script:
    - docker build -t $DOCKER_IMAGE_FRONTEND:$CI_COMMIT_SHORT_SHA spring-boot-react-example/src/main/js/
    - docker push $DOCKER_IMAGE_FRONTEND:$CI_COMMIT_SHORT_SHA
  
deploy-backend:
  stage: deploy
  script:
    - export KUBECONFIG=$KUBE_CONFIG_PATH
    - kubectl apply -f spring-boot-react-example/k8s/backend-deployment.yaml
    - kubectl set image deployment/backend backend=$DOCKER_IMAGE_BACKEND:$CI_COMMIT_SHORT_SHA
    - kubectl rollout status deployment/backend


deploy-frontend:
  stage: deploy
  script:
    - export KUBECONFIG=$KUBE_CONFIG_PATH
    - kubectl apply -f spring-boot-react-example/k8s/frontend-deployment.yaml
    - kubectl set image deployment/frontend frontend=$DOCKER_IMAGE_FRONTEND:$CI_COMMIT_SHORT_SHA
    - kubectl rollout status deployment/frontend